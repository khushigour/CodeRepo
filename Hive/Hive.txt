
CREATE (DATABASE|SCHEMA) [IF NOT EXISTS] database_name [COMMENT 'database_comment'] [LOCATION 'hdfs_path'] [WITH DBPROPERTIES (property_name=property_value, ...)];

------------------------------------------------------------------------------------------------ 

SHOW (DATABASES|SCHEMAS) [LIKE 'pattern']; 

------------------------------------------------------------------------------------------------

USE database_name; 

------------------------------------------------------------------------------------------------

ALTER (DATABASE|SCHEMA) database_name [SET DBPROPERTIES (property_name=property_value, ...)] [SET OWNER [USER|ROLE] user_or_role] [SET LOCATION 'new_hdfs_path']; 

------------------------------------------------------------------------------------------------

DROP (DATABASE|SCHEMA) [IF EXISTS] database_name [RESTRICT|CASCADE]; 

------------------------------------------------------------------------------------------------

CREATE TABLE <table_name> ( 
    column1 data_type, 
    column2 data_type, 
    ... 
) 
STORED AS <file_format>; 

------------------------------------------------------------------------------------------------



> DATATYPES: 

1. Primitive: 

CREATE TABLE persons (id INT, name STRING, age INT); 

CREATE TABLE persons (id INT, name STRING, address VARCHAR(100)); 

CREATE TABLE events (id INT, event_name STRING, event_time TIMESTAMP); 

2. Complex: 

Array - CREATE TABLE persons (id INT, name STRING, favorite_numbers ARRAY<INT>);   (Collection Type)
Map - CREATE TABLE persons (id INT, name STRING, extra_info MAP<STRING, STRING>);  (Collection Type)
Struct - CREATE TABLE persons (id INT, name STRING, address STRUCT<street: STRING, city: STRING, state: STRING, zip: INT>); 

3. User-Defined Types:
UDTs can be created using the CREATE TYPE statement and are implemented as Java classes.

CREATE TYPE address AS STRUCT<street: STRING, city: STRING, state: STRING, zip: INT>;
CREATE TABLE persons (id INT, name STRING, address address); 

---------------------------------------------------------------------------------------------------

INSERTION OF DATA:

INSERT INTO table_name [PARTITION (partition_column=value, ...)] 
VALUES (value1, value2, ...); 

INSERT INTO table_name [PARTITION (partition_column=value, ...)] 
SELECT column1, column2, ... 
FROM source_table 
WHERE condition; 

>> Perform bulk data insertion into a table. This command is particularly useful when you have large datasets stored in external files, such as CSV or TSV files.

LOAD DATA [LOCAL] INPATH 'input_path' [OVERWRITE] INTO TABLE table_name [PARTITION (partition_column=value, ...)]; 

---------------------------------------------------------------------------------------------------

INSERT OVERWRITE TABLE sales_partitioned PARTITION (sale_date='2023-01-01') 
SELECT order_id, product_name 
FROM sales 
WHERE sale_date='2023-01-01'; 

----------------------------------------------------------------------------------------------------

SELECT product_id, sale_date, SUM(sale_amount) 
FROM sales 
GROUP BY GROUPING SETS ((product_id), (sale_date)); 

SELECT product_id, sale_date, SUM(sale_amount) 
FROM sales 
GROUP BY CUBE (product_id, sale_date); 

SELECT product_id, sale_date, SUM(sale_amount) 
FROM sales 
GROUP BY ROLLUP (product_id, sale_date); 